@startuml Knight Tour Algorithm - Page 1
!theme plain
skinparam activity {
  BackgroundColor #E6F3FF
  BorderColor #4A90E2
  FontSize 10
}
skinparam decision {
  BackgroundColor #FFE6E6
  BorderColor #E24A4A
  FontSize 10
}

title Алгоритм обхода коня - Страница 1: Основной алгоритм SolveKnightTour

start

:Получить координаты x, y;

:Пометить клетку номером хода;
note right
  Board[x][y] = MoveCount
  Path.append(Position{x,y})
  MoveCount++
end note

:Задержка 100ms для визуализации;

if (MoveCount == 64?) then (да)
  :Solved = true;
  :return true;
  stop
else (нет)
endif

:Создать пустой список moves[];

:Для каждого из 8 направлений коня;
note right
  knightMoves = [8]Position{
    {2,1}, {2,-1}, {-2,1}, {-2,-1},
    {1,2}, {1,-2}, {-1,2}, {-1,-2}
  }
end note

:Вычислить новые координаты;
note right
  nx = x + move.X
  ny = y + move.Y
end note

if (isValidMove(nx, ny)?) then (да)
  :Добавить в moves[];
endif

:Применить эвристику Варнсдорфа;
note right: Сортировка по количеству доступных ходов

:Для каждого хода в отсортированном moves[];

:Рекурсивный вызов SolveKnightTour(move.X, move.Y);

if (Вызов вернул true?) then (да)
  :return true;
  stop
endif

:Все ходы проверены без успеха;

:Бэктрекинг - откат изменений;
note right
  Board[x][y] = -1
  Path = Path[:len(Path)-1]
  MoveCount--
end note

:return false;

stop

@enduml

@startuml Knight Tour Algorithm - Page 2
!theme plain
skinparam activity {
  BackgroundColor #E6F3FF
  BorderColor #4A90E2
  FontSize 10
}
skinparam decision {
  BackgroundColor #FFE6E6
  BorderColor #E24A4A
  FontSize 10
}

title Алгоритм обхода коня - Страница 2: Функция isValidMove

start

:Получить координаты x, y;

if (x >= 0?) then (нет)
  :return false;
  stop
endif

if (x < 8?) then (нет)
  :return false;
  stop
endif

if (y >= 0?) then (нет)
  :return false;
  stop
endif

if (y < 8?) then (нет)
  :return false;
  stop
endif

if (Board[x][y] == -1?) then (да)
  :return true;
  stop
else (нет)
  :return false;
  stop
endif

@enduml

@startuml Knight Tour Algorithm - Page 3
!theme plain
skinparam activity {
  BackgroundColor #E6F3FF
  BorderColor #4A90E2
  FontSize 10
}
skinparam decision {
  BackgroundColor #FFE6E6
  BorderColor #E24A4A
  FontSize 10
}

title Алгоритм обхода коня - Страница 3: Функция countMoves

start

:Получить координаты x, y;

:count = 0;

:Для каждого из 8 направлений коня;

:Вычислить новые координаты;
note right
  nx = x + move.X
  ny = y + move.Y
end note

if (isValidMove(nx, ny)?) then (да)
  :count++;
endif

:Проверены все 8 направлений?;

:return count;

stop

@enduml

@startuml Knight Tour Algorithm - Page 4
!theme plain
skinparam activity {
  BackgroundColor #E6F3FF
  BorderColor #4A90E2
  FontSize 10
}
skinparam decision {
  BackgroundColor #FFE6E6
  BorderColor #E24A4A
  FontSize 10
}

title Алгоритм обхода коня - Страница 4: Эвристика Варнсдорфа (сортировка)

start

:Получить список moves[];

:Сортировка пузырьком;
note right
  Сортировать по возрастанию количества
  доступных ходов для каждой позиции
end note

:i = 0;

while (i < len(moves)-1?) is (да)
  :j = i + 1;
  
  while (j < len(moves)?) is (да)
    :Получить количество ходов для moves[i];
    :Получить количество ходов для moves[j];
    
    if (countMoves(i) > countMoves(j)?) then (да)
      :Поменять местами moves[i] и moves[j];
    endif
    
    :j++;
  endwhile (нет)
  
  :i++;
endwhile (нет)

:Возврат отсортированного списка;
note right
  Ходы с наименьшим количеством
  продолжений идут первыми
end note

stop

@enduml

@startuml Knight Tour Algorithm - Page 5
!theme plain

title Алгоритм обхода коня - Страница 5: Структуры данных

note as N1
**Position struct**
type Position struct {
  X int  // Координата X
  Y int  // Координата Y
}
end note

note as N2
**Game struct**
type Game struct {
  Board [8][8]int      // Доска: -1 = не посещена, 0+ = номер хода
  Path []Position      // Путь коня
  Current Position     // Текущая позиция
  MoveCount int        // Счетчик ходов
  Solved bool          // Флаг решения задачи
  Cellsize float64     // Размер клетки для отрисовки
  StartPosition Position // Стартовая позиция
}
end note

note as N3
**knightMoves массив**
var knightMoves = [8]Position{
  {2, 1}, {2, -1}, {-2, 1}, {-2, -1},
  {1, 2}, {1, -2}, {-1, 2}, {-1, -2}
}

Все 8 возможных ходов коня в шахматах
end note

note as N4
**Инициализация NewGame()**
1. Создать объект Game
2. Установить размер клетки = 48.0
3. Установить стартовую позицию (1,3)
4. Инициализировать доску значениями -1
5. Запустить горутину с алгоритмом поиска
end note

@enduml